// SpO2ServiceRefactored.ts - T·∫≠p trung logic ƒëo SpO2 s·ª≠ d·ª•ng BaseMeasureService
import { Device } from 'react-native-ble-plx';
import * as base64 from 'base64-js';
import { Alert } from 'react-native';
import {
  SERVICE_UUID,
  WRITE_UUID,
  NOTIFY_UUID,
  BLOOD_OXYGEN_VISIBLE_MIN,
  BLOOD_OXYGEN_VISIBLE_MAX,
  SPO2_PREPARE_COMMAND,
  SPO2_START_COMMAND,
  SPO2_STOP_COMMAND
} from './constants';

import {
  MeasurementParams,
  setupRealDataCallback,
  sendMeasurementCommand,
  stopMeasurement,
  setupBasicNotification,
  isCompletionNotification,
  isValueInRange
} from './BaseMeasureService';

// G·ª≠i l·ªánh ƒëo SpO2
export const sendSpO2Commands = async (
  device: Device | null,
  logCallback: (message: string) => void
): Promise<boolean> => {
  if (!device) {
    logCallback(" Ch∆∞a k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã!");
    return false;
  }
  
  try {
    // 1. G·ª≠i l·ªánh chu·∫©n b·ªã ƒëo SpO2
    const prepareSuccess = await sendMeasurementCommand(
      device,
      SPO2_PREPARE_COMMAND,
      logCallback,
      " ƒê√£ g·ª≠i l·ªánh chu·∫©n b·ªã ƒëo SpO2 (Prepare SpO2)"
    );
    
    if (!prepareSuccess) {
      return false;
    }

    // Ch·ªù m·ªôt ch√∫t
    await new Promise(resolve => setTimeout(resolve, 500));

    // 2. G·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo SpO2
    const startSuccess = await sendMeasurementCommand(
      device,
      SPO2_START_COMMAND,
      logCallback,
      " ƒê√£ g·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo SpO2 (Start SpO2)"
    );
    
    return startSuccess;
  } catch (error) {
    logCallback(` L·ªói khi g·ª≠i l·ªánh ƒëo SpO2: ${error}`);
    return false;
  }
};

// D·ª´ng ƒëo SpO2
export const stopSpO2Measurement = async (
  device: Device | null,
  measuring: boolean,
  notificationSubscription: any,
  setNotificationSubscription: (subscription: any) => void,
  pollingIntervalId: NodeJS.Timeout | null,
  setPollingIntervalId: (id: NodeJS.Timeout | null) => void,
  setMeasuring: (measuring: boolean) => void,
  spo2Value: number | null,
  addLog: (message: string) => void
) => {
  // H·ªßy polling interval n·∫øu c√≥
  if (pollingIntervalId) {
    clearInterval(pollingIntervalId);
    setPollingIntervalId(null);
    addLog(" ‚úÖ ƒê√£ h·ªßy polling interval");
  }
  
  const params: MeasurementParams = {
    device,
    notificationSubscription,
    setNotificationSubscription,
    setMeasuring,
    addLog
  };
  
  await stopMeasurement(
    params, 
    SPO2_STOP_COMMAND,
    " üî¥ ƒêang d·ª´ng ƒëo SpO2..."
  );
  
  // Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
  if (spo2Value) {
    addLog(` üìä K·∫øt qu·∫£ ƒëo SpO2: ${spo2Value}%`);
    Alert.alert(
      "K·∫øt qu·∫£ ƒëo SpO2",
      `N·ªìng ƒë·ªô oxy trong m√°u c·ªßa b·∫°n: ${spo2Value}%`,
      [{ text: "OK" }]
    );
  } else {
    addLog(" ‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt qu·∫£ SpO2");
    Alert.alert(
      "Kh√¥ng c√≥ k·∫øt qu·∫£",
      "Kh√¥ng th·ªÉ ƒëo ƒë∆∞·ª£c SpO2. Vui l√≤ng th·ª≠ l·∫°i.",
      [{ text: "OK" }]
    );
  }
};

// X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ thi·∫øt b·ªã
export const handleData = (
  data: number[], 
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setMeasuring?: (measuring: boolean) => void
) => {
  // Hi·ªÉn th·ªã d·ªØ li·ªáu d∆∞·ªõi d·∫°ng hex ƒë·ªÉ debug
  const hexData = data.map(b => b.toString(16).padStart(2, '0')).join(' ');
  addLog(` üìä Nh·∫≠n d·ªØ li·ªáu: ${hexData}`);
  
  // Ki·ªÉm tra n·∫øu l√† th√¥ng b√°o k·∫øt th√∫c ƒëo
  if (isCompletionNotification(data)) {
    addLog(" üîî Ph√°t hi·ªán g√≥i th√¥ng b√°o K·∫æT TH√öC ƒëo v·ªõi m√£ 0x040E (1038)");
    
    // T·ª± ƒë·ªông d·ª´ng ƒëo khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o k·∫øt th√∫c
    if (setMeasuring) {
      addLog(" ‚úÖ ƒê√£ nh·∫≠n th√¥ng b√°o k·∫øt th√∫c ƒëo, t·ª± ƒë·ªông d·ª´ng");
      setMeasuring(false);
    }
    
    return;
  }
  
  // M·∫´u d·ªØ li·ªáu SpO2: 06 02 08 00 XX YY ZZ - v·ªõi XX l√† gi√° tr·ªã SpO2, YY l√† PR
  if (data.length >= 6 && data[0] === 0x06 && data[1] === 0x02) {
    // L·∫•y gi√° tr·ªã SpO2 t·ª´ byte th·ª© 5 (index 4)
    const spo2Value = data[4];
    
    // Ki·ªÉm tra xem gi√° tr·ªã c√≥ n·∫±m trong kho·∫£ng h·ª£p l·ªá kh√¥ng
    if (isValueInRange(spo2Value, BLOOD_OXYGEN_VISIBLE_MIN, BLOOD_OXYGEN_VISIBLE_MAX)) {
      addLog(` üíß SpO2: ${spo2Value}%`);
      setSpo2Value(spo2Value);
      
      // L·∫•y gi√° tr·ªã nh·ªãp m·∫°ch (PR) t·ª´ byte th·ª© 6 (index 5)
      if (data.length >= 7) {
        const prValue = data[5];
        if (prValue > 0 && prValue < 200) {
          addLog(` üíì PR: ${prValue} BPM`);
          setPrValue(prValue);
        }
      }
      
      // Th√™m v√†o buffer ƒë·ªÉ v·∫Ω ƒë·ªì th·ªã
      const newBuffer = [...dataBuffer, data];
      if (newBuffer.length > 100) {
        newBuffer.shift(); // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc buffer
      }
      setDataBuffer(newBuffer);
    } else {
      addLog(` ‚ö†Ô∏è Gi√° tr·ªã SpO2 kh√¥ng h·ª£p l·ªá: ${spo2Value}`);
    }
    return;
  }
  
  // Ki·ªÉm tra c√°c lo·∫°i g√≥i d·ªØ li·ªáu kh√°c c√≥ th·ªÉ ch·ª©a SpO2
  if (data.length >= 5 && data[0] === 0x06) {
    const potentialSpo2Value = data[4];
    
    if (isValueInRange(potentialSpo2Value, BLOOD_OXYGEN_VISIBLE_MIN, BLOOD_OXYGEN_VISIBLE_MAX)) {
      addLog(` üíß SpO2 (lo·∫°i kh√°c): ${potentialSpo2Value}%`);
      setSpo2Value(potentialSpo2Value);
      
      // Th√™m v√†o buffer ƒë·ªÉ v·∫Ω ƒë·ªì th·ªã
      const newBuffer = [...dataBuffer, data];
      if (newBuffer.length > 100) {
        newBuffer.shift(); // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc buffer
      }
      setDataBuffer(newBuffer);
    }
  }
};

// Thi·∫øt l·∫≠p polling mechanism (alternative to notifications)
export const setupPollingMechanism = (
  device: Device, 
  measuring: boolean,
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setPollingIntervalId: (id: NodeJS.Timeout | null) => void,
  setMeasuring?: (measuring: boolean) => void
) => {
  // Thi·∫øt l·∫≠p polling interval
  const intervalId = setInterval(() => {
    if (!measuring) {
      clearInterval(intervalId);
      setPollingIntervalId(null);
      return;
    }
    
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ characteristic
    pollData(device, measuring, setSpo2Value, setPrValue, setDataBuffer, dataBuffer, addLog, setMeasuring);
  }, 1000); // Poll m·ªói gi√¢y
  
  setPollingIntervalId(intervalId);
  addLog(" ‚úÖ ƒê√£ thi·∫øt l·∫≠p polling mechanism");
};

// Polling ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu SpO2
export const pollData = async (
  device: Device | null,
  measuring: boolean,
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setMeasuring?: (measuring: boolean) => void
) => {
  if (!device || !measuring) return;
  
  try {
    // ƒê·ªçc gi√° tr·ªã t·ª´ characteristic
    const characteristic = await device.readCharacteristicForService(
      SERVICE_UUID,
      NOTIFY_UUID
    );
    
    if (characteristic && characteristic.value) {
      const data = base64.toByteArray(characteristic.value);
      
      // X·ª≠ l√Ω d·ªØ li·ªáu
      handleData(
        Array.from(data),
        setSpo2Value,
        setPrValue,
        setDataBuffer,
        dataBuffer,
        addLog,
        setMeasuring
      );
    }
  } catch (error) {
    addLog(` ‚ö†Ô∏è L·ªói khi poll d·ªØ li·ªáu: ${error}`);
  }
};

// B·∫Øt ƒë·∫ßu ƒëo SpO2
export const startSpO2Measurement = async (
  device: Device | null,
  notificationSubscription: any,
  setNotificationSubscription: (subscription: any) => void,
  setMeasuring: (measuring: boolean) => void,
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setPollingIntervalId: (id: NodeJS.Timeout | null) => void
): Promise<boolean> => {
  if (!device) {
    addLog(" ‚ùå Kh√¥ng c√≥ thi·∫øt b·ªã k·∫øt n·ªëi");
    return false;
  }
  
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi
    const isConnected = await device.isConnected();
    if (!isConnected) {
      addLog(" ‚ùå Thi·∫øt b·ªã ƒë√£ ng·∫Øt k·∫øt n·ªëi");
      return false;
    }
    
    // H·ªßy b·ªè c√°c subscription hi·ªán t·∫°i n·∫øu c√≥
    // ƒê·∫∑t l·∫°i subscription ƒë·ªÉ tr√°nh l·ªói khi ƒëo l·∫°i
    setNotificationSubscription(null);
    
    // Sau ƒë√≥ m·ªõi th·ª≠ h·ªßy subscription c≈© n·∫øu c√≥
    if (notificationSubscription) {
      try {
        addLog(" H·ªßy ƒëƒÉng k√Ω th√¥ng b√°o tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ƒëo m·ªõi...");
        if (typeof notificationSubscription.remove === 'function') {
          notificationSubscription.remove();
          addLog(" ‚úÖ ƒê√£ h·ªßy ƒëƒÉng k√Ω th√¥ng b√°o tr∆∞·ªõc ƒë√≥");
        } else {
          addLog(" ‚ö†Ô∏è L∆∞u √Ω: notificationSubscription.remove kh√¥ng ph·∫£i l√† h√†m");
        }
      } catch (error) {
        addLog(` ‚ö†Ô∏è Kh√¥ng th·ªÉ h·ªßy th√¥ng b√°o c≈©: ${error}`);
        // V·∫´n ti·∫øp t·ª•c v√¨ ƒë√¢y c√≥ th·ªÉ ch·ªâ l√† c·∫£nh b√°o, kh√¥ng ph·∫£i l·ªói
      }
    }
    
    // ƒê·∫∑t l·∫°i gi√° tr·ªã SpO2 v√† PR
    setSpo2Value(null);
    setPrValue(null);
    
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i ƒëo
    setMeasuring(true);
    
    // Thi·∫øt l·∫≠p callback c∆° b·∫£n
    const setupSuccess = await setupBasicNotification(
      device,
      handleData,
      setNotificationSubscription,
      addLog,
      setSpo2Value,
      setPrValue,
      setDataBuffer,
      dataBuffer,
      addLog,
      setMeasuring
    );
    
    if (!setupSuccess) {
      addLog(" ‚ùå Kh√¥ng th·ªÉ thi·∫øt l·∫≠p callback");
      setMeasuring(false);
      return false;
    }
    
    // Thi·∫øt l·∫≠p polling mechanism nh∆∞ m·ªôt ph∆∞∆°ng ph√°p d·ª± ph√≤ng
    setupPollingMechanism(
      device,
      true,
      setSpo2Value,
      setPrValue,
      setDataBuffer,
      dataBuffer,
      addLog,
      setPollingIntervalId,
      setMeasuring
    );
    
    // G·ª≠i l·ªánh ƒëo
    addLog(" G·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo SpO2...");
    await sendSpO2Commands(device, addLog);
    
    addLog(" ‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu ƒëo SpO2");
    Alert.alert(
      "ƒêo SpO2",
      "ƒêang ƒëo n·ªìng ƒë·ªô oxy trong m√°u c·ªßa b·∫°n. Vui l√≤ng gi·ªØ nguy√™n nh·∫´n tr√™n ng√≥n tay v√† ch·ªù k·∫øt qu·∫£.",
      [{ text: "OK" }]
    );
    
    return true;
  } catch (error) {
    addLog(` ‚ùå L·ªói khi b·∫Øt ƒë·∫ßu ƒëo SpO2: ${error}`);
    setMeasuring(false);
    return false;
  }
};
