// SpO2Service.ts - T·∫≠p trung logic ƒëo SpO2 cho ·ª©ng d·ª•ng
import { Device, Characteristic } from 'react-native-ble-plx';
import * as base64 from 'base64-js';
import {
  SERVICE_UUID,
  WRITE_UUID,
  NOTIFY_UUID,
  BLOOD_OXYGEN_VISIBLE_MIN,
  BLOOD_OXYGEN_VISIBLE_MAX,
  SPO2_PREPARE_COMMAND,
  SPO2_START_COMMAND,
  SPO2_STOP_COMMAND
} from './constants';

// T·∫°o ƒëƒÉng k√Ω callback ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu SpO2 tr·ª±c ti·∫øp
export const setupRealDataCallback = async (
  device: Device | null,
  handleData: (data: number[], setMeasuring?: (measuring: boolean) => void) => void,
  logCallback: (message: string) => void,
  setMeasuring?: (measuring: boolean) => void
): Promise<any[]> => {
  if (!device) return [];
  
  const additionalSubscriptions: any[] = [];
  
  logCallback(" ƒêƒÉng k√Ω callback nh·∫≠n d·ªØ li·ªáu SpO2 tr·ª±c ti·∫øp...");
  
  try {
    // Li·ªát k√™ t·∫•t c·∫£ c√°c ƒë·∫∑c t√≠nh (characteristics) c·ªßa service
    const characteristics = await device.characteristicsForService(SERVICE_UUID);
    
    if (characteristics.length > 0) {
      logCallback(` T√¨m th·∫•y ${characteristics.length} characteristics trong service`);
      
      // ƒêƒÉng k√Ω l·∫Øng nghe v·ªõi t·∫•t c·∫£ c√°c ƒë·∫∑c t√≠nh c√≥ th·ªÉ notification/indication
      for (const char of characteristics) {
        if (char.uuid === NOTIFY_UUID) continue; // B·ªè qua NOTIFY_UUID v√¨ ƒë√£ l·∫Øng nghe ·ªü tr√™n
        
        logCallback(` Th·ª≠ ƒëƒÉng k√Ω l·∫Øng nghe v·ªõi characteristic: ${char.uuid}`);
        
        try {
          // Ki·ªÉm tra n·∫øu characteristic c√≥ th·ªÉ notification
          if (char.isNotifiable || char.isIndicatable) {
            const additionalSubscription = device.monitorCharacteristicForService(
              SERVICE_UUID,
              char.uuid,
              (error, characteristic) => {
                if (error) {
                  logCallback(` L·ªói nh·∫≠n th√¥ng b√°o t·ª´ ${char.uuid}: ${error.message}`);
                  return;
                }
                
                if (characteristic?.value) {
                  const data = base64.toByteArray(characteristic.value);
                  logCallback(` D·ªØ li·ªáu t·ª´ ${char.uuid}: ${Array.from(data).map(b => b.toString(16).padStart(2, '0')).join(' ')}`);
                  
                  // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ c√°c ƒë·∫∑c t√≠nh kh√°c
                  handleData(Array.from(data), setMeasuring);
                }
              }
            );
            
            additionalSubscriptions.push(additionalSubscription);
            logCallback(` ƒê√£ ƒëƒÉng k√Ω l·∫Øng nghe v·ªõi characteristic: ${char.uuid}`);
          }
        } catch (error) {
          logCallback(` Kh√¥ng th·ªÉ ƒëƒÉng k√Ω v·ªõi characteristic ${char.uuid}: ${error}`);
        }
      }
    }
  } catch (error) {
    logCallback(` L·ªói khi thi·∫øt l·∫≠p real data callback: ${error}`);
  }
  
  return additionalSubscriptions;
};

// G·ª≠i l·ªánh ƒëo SpO2
export const sendSpO2Commands = async (
  device: Device | null,
  logCallback: (message: string) => void
): Promise<boolean> => {
  if (!device) {
    logCallback(" Ch∆∞a k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã!");
    return false;
  }
  
  try {
    // 1. G·ª≠i l·ªánh chu·∫©n b·ªã ƒëo SpO2 (t∆∞∆°ng ƒë∆∞∆°ng v·ªõi YCBTClient.appPrepareBloodOxygen)
    logCallback(" ƒê√£ g·ª≠i l·ªánh chu·∫©n b·ªã ƒëo SpO2 (Prepare SpO2)");
    await device.writeCharacteristicWithResponseForService(
      SERVICE_UUID,
      WRITE_UUID,
      base64.fromByteArray(new Uint8Array(SPO2_PREPARE_COMMAND))
    );

    // Ch·ªù m·ªôt ch√∫t
    await new Promise(resolve => setTimeout(resolve, 500));

    // 2. G·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo SpO2 (t∆∞∆°ng ƒë∆∞∆°ng v·ªõi YCBTClient.appStartMeasurement(1, 2, ...))
    // Tham s·ªë: 1 = b·∫≠t, 2 = SpO2 (Constants.MeasureType.BloodOxygen = 2)
    logCallback(" ƒê√£ g·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo SpO2 (StartMeasurement)");
    await device.writeCharacteristicWithResponseForService(
      SERVICE_UUID,
      WRITE_UUID,
      base64.fromByteArray(new Uint8Array(SPO2_START_COMMAND))
    );
    
    return true;
  } catch (error) {
    logCallback(` L·ªói khi g·ª≠i l·ªánh ƒëo SpO2: ${error}`);
    return false;
  }
};

// D·ª´ng ƒëo SpO2
export const stopSpO2Measurement = async (
  device: Device | null,
  measuring: boolean,
  notificationSubscription: any,
  setNotificationSubscription: (subscription: any) => void,
  pollingIntervalId: NodeJS.Timeout | null,
  setPollingIntervalId: (id: NodeJS.Timeout | null) => void,
  setMeasuring: (measuring: boolean) => void,
  spo2Value: number | null,
  addLog: (message: string) => void
) => {
  // ƒê·∫£m b·∫£o d·ª´ng tr·∫°ng th√°i ƒëo ngay l·∫≠p t·ª©c
  setMeasuring(false);
  
  // H·ªßy polling interval n·∫øu c√≥
  if (pollingIntervalId) {
    clearInterval(pollingIntervalId);
    setPollingIntervalId(null);
    addLog("‚úì ƒê√£ h·ªßy polling interval");
  }
  
  // H·ªßy ƒëƒÉng k√Ω th√¥ng b√°o n·∫øu c√≥
  if (notificationSubscription) {
    notificationSubscription.remove();
    setNotificationSubscription(null);
    addLog("‚úì ƒê√£ h·ªßy ƒëƒÉng k√Ω notifications");
  }
  
  if (!device) {
    addLog("‚ùå Kh√¥ng c√≥ thi·∫øt b·ªã ƒë·ªÉ d·ª´ng ƒëo!");
    return;
  }
  
  try {
    // Ki·ªÉm tra xem thi·∫øt b·ªã c√≥ th·ª±c s·ª± ƒë∆∞·ª£c k·∫øt n·ªëi kh√¥ng
    let isConnected = false;
    try {
      isConnected = await device.isConnected();
    } catch (error) {
      addLog(`‚ùå Thi·∫øt b·ªã ƒë√£ m·∫•t k·∫øt n·ªëi khi c·ªë g·∫Øng d·ª´ng ƒëo: ${error}`);
      return;
    }
    
    if (!isConnected) {
      addLog("‚ùå Thi·∫øt b·ªã kh√¥ng c√≤n k·∫øt n·ªëi khi d·ª´ng ƒëo");
      return;
    }
    
    // G·ª≠i l·ªánh d·ª´ng ƒëo SpO2
    addLog("ƒê√£ g·ª≠i l·ªánh d·ª´ng ƒëo SpO2");
    await device.writeCharacteristicWithResponseForService(
      SERVICE_UUID,
      WRITE_UUID,
      base64.fromByteArray(new Uint8Array(SPO2_STOP_COMMAND))
    );
    
    addLog("‚úÖ ƒê√£ d·ª´ng ƒëo SpO2!");
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
    if (spo2Value !== null) {
      addLog(`üìä K·∫øt qu·∫£ ƒëo SpO2: ${spo2Value}%`);
    }
  } catch (error) {
    addLog(`‚ùå L·ªói khi d·ª´ng ƒëo SpO2: ${error}`);
  }
};

// X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ thi·∫øt b·ªã
export const handleData = (
  data: number[], 
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setMeasuring?: (measuring: boolean) => void
) => {
  if (!data || data.length === 0) {
    addLog("‚ùå D·ªØ li·ªáu r·ªóng!");
    return;
  }

  // Ghi l·∫°i d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ ph√¢n t√≠ch
  const hexData = Array.from(data).map(b => b.toString(16).padStart(2, '0')).join(' ');
  addLog(`üìä Nh·∫≠n d·ªØ li·ªáu: ${hexData}`);

  // TR∆Ø·ªúNG H·ª¢P ƒê·∫∂C BI·ªÜT: N·∫øu ch·ªâ nh·∫≠n ƒë∆∞·ª£c 1 byte duy nh·∫•t
  // D·ª±a tr√™n log Frida: [+] D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: 60 => SpO2 = 96
  if (data.length === 1) {
    const spo2Value = data[0];

    if (spo2Value >= BLOOD_OXYGEN_VISIBLE_MIN && spo2Value <= BLOOD_OXYGEN_VISIBLE_MAX) {
      addLog(`‚úÖ Ph√°t hi·ªán d·ªØ li·ªáu SpO2 1 byte: ${spo2Value}%`);
      setSpo2Value(spo2Value);
      // Auto-stop measurement when valid data is received
      if (setMeasuring) setMeasuring(false);
      Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${spo2Value}%`);
      return;
    } else {
      addLog(`‚ö†Ô∏è Nh·∫≠n ƒë∆∞·ª£c 1 byte d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${spo2Value}`);
    }
  }

  // TR∆Ø·ªúNG H·ª¢P M·ªöI: X·ª≠ l√Ω g√≥i d·ªØ li·ªáu t·ª´ characteristic be940003-7333-be46-b7ae-689e71722bd5
  // ƒê·ªãnh d·∫°ng: 06 02 07 00 63 b4 e8 (t·ª´ log, v·ªõi 0x63 = 99%)
  if (data.length >= 5 && data[0] === 0x06 && data[1] === 0x02 && data[2] === 0x07) {
    // Gi√° tr·ªã SpO2 n·∫±m ·ªü v·ªã tr√≠ th·ª© 4 (index = 4)
    const spo2Value = data[4];

    if (spo2Value >= BLOOD_OXYGEN_VISIBLE_MIN && spo2Value <= BLOOD_OXYGEN_VISIBLE_MAX) {
      addLog(`üîç T√¨m th·∫•y gi√° tr·ªã c√≥ th·ªÉ l√† SpO2 t·∫°i v·ªã tr√≠ 4: ${spo2Value}%`);
      setSpo2Value(spo2Value);
      addLog(`‚úÖ S·ª≠ d·ª•ng gi√° tr·ªã SpO2: ${spo2Value}%`);
      // Auto-stop measurement when valid data is received
      if (setMeasuring) setMeasuring(false);
      Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${spo2Value}%`);
      return;
    }
  }

  // Tr∆∞·ªùng h·ª£p 1: Ki·ªÉm tra g√≥i d·ªØ li·ªáu Real-time Blood Oxygen (t∆∞∆°ng ·ª©ng v·ªõi case 2 trong packetRealHandle)
  // Trong code Java, SpO2 data c√≥ dataType = 1538, v√† ƒë∆∞·ª£c x·ª≠ l√Ω trong case 2
  if (data.length >= 3 && data[0] === 3 && data[1] === 62) {
    // ƒê·ªãnh d·∫°ng theo packetRealHandle v√† unpackRealBloodOxygenData
    const spo2Value = data[2] & 0xFF; // L·∫•y byte ƒë·∫ßu ti√™n c·ªßa d·ªØ li·ªáu

    if (spo2Value >= BLOOD_OXYGEN_VISIBLE_MIN && spo2Value <= BLOOD_OXYGEN_VISIBLE_MAX) {
      addLog(`‚úÖ Gi√° tr·ªã SpO2 nh·∫≠n ƒë∆∞·ª£c t·ª´ g√≥i Real-time (3, 62): ${spo2Value}%`);
      setSpo2Value(spo2Value);
      // Auto-stop measurement when valid data is received
      if (setMeasuring) setMeasuring(false);
      Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${spo2Value}%`);
      return;
    } else {
      addLog(`‚ö†Ô∏è Gi√° tr·ªã SpO2 kh√¥ng h·ª£p l·ªá t·ª´ g√≥i Real-time: ${spo2Value}`);
    }
  }

  // Tr∆∞·ªùng h·ª£p 2: Ki·ªÉm tra g√≥i ph·∫£n h·ªìi ƒëo l∆∞·ªùng
  if (data.length >= 6 && data[0] === 3 && data[1] === 47) {
    addLog("üîç ƒê√£ nh·∫≠n g√≥i ACK t·ª´ l·ªánh StartMeasurement (0x2F)");
    // Kh√¥ng c√≥ gi√° tr·ªã SpO2 trong g√≥i n√†y, ch·ªâ l√† x√°c nh·∫≠n l·ªánh
    return;
  }

  // Tr∆∞·ªùng h·ª£p 3: Ki·ªÉm tra g√≥i ph·∫£n h·ªìi t·ª´ l·ªánh getRealBloodOxygen (0x11 = 17)
  if (data.length >= 5 && data[0] === 3 && data[1] === 17) {
    addLog("üîç ƒê√£ nh·∫≠n g√≥i ph·∫£n h·ªìi t·ª´ l·ªánh getRealBloodOxygen (0x11)");

    // Ki·ªÉm tra n·∫øu c√≥ m√£ l·ªói (FF)
    if (data[4] === 0xFF) {
      addLog("‚ö†Ô∏è Ph·∫£n h·ªìi getRealBloodOxygen b√°o l·ªói (FF)");
      return;
    }

    // N·∫øu kh√¥ng ph·∫£i l·ªói v√† c√≥ d·ªØ li·ªáu, ki·ªÉm tra byte ƒë·∫ßu ti√™n
    const spo2Value = data[4]; // Byte ƒë·∫ßu ti√™n c·ªßa d·ªØ li·ªáu th·ª±c t·∫ø
    if (spo2Value >= BLOOD_OXYGEN_VISIBLE_MIN && spo2Value <= BLOOD_OXYGEN_VISIBLE_MAX) {
      addLog(`‚úÖ Gi√° tr·ªã SpO2 t·ª´ g√≥i 0x11: ${spo2Value}%`);
      setSpo2Value(spo2Value);
      Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${spo2Value}%`);
      return;
    } else {
      addLog(`‚ö†Ô∏è Gi√° tr·ªã SpO2 kh√¥ng h·ª£p l·ªá t·ª´ g√≥i 0x11: ${spo2Value}`);
    }
  }

  // Tr∆∞·ªùng h·ª£p 4: Ki·ªÉm tra g√≥i d·ªØ li·ªáu tr·∫°ng th√°i nh·∫´n c√≥ ch·ª©a SpO2
  if (data.length >= 3 && data[0] === 3 && data[1] === 9) {
    addLog("üîç ƒê√£ nh·∫≠n g√≥i d·ªØ li·ªáu tr·∫°ng th√°i nh·∫´n (0x09)");

    // Theo ph√¢n t√≠ch t·ª´ log, byte th·ª© 3 c√≥ th·ªÉ ch·ª©a gi√° tr·ªã SpO2
    if (data.length >= 5) {
      const possibleSpo2 = data[4]; // Gi·∫£ ƒë·ªãnh byte th·ª© 5 c√≥ th·ªÉ ch·ª©a SpO2
      if (possibleSpo2 >= BLOOD_OXYGEN_VISIBLE_MIN && possibleSpo2 <= BLOOD_OXYGEN_VISIBLE_MAX) {
        addLog(`‚úÖ Gi√° tr·ªã SpO2 c√≥ th·ªÉ t·ª´ g√≥i 0x09: ${possibleSpo2}%`);
        setSpo2Value(possibleSpo2);
        Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${possibleSpo2}%`);
        return;
      }
    }
  }

  // Tr∆∞·ªùng h·ª£p 5: Ki·ªÉm tra g√≥i d·ªØ li·ªáu ƒëo l∆∞·ªùng (0x0E) - QUAN TR·ªåNG
  // Format: 04 0e 08 00 02 01 99 34 (t·ª´ log c·ªßa ng∆∞·ªùi d√πng)
  if (data.length >= 8 && data[0] === 4 && data[1] === 0x0E) {
    addLog("üîç ƒê√£ nh·∫≠n g√≥i d·ªØ li·ªáu ƒëo l∆∞·ªùng (0x0E)");

    // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† g√≥i d·ªØ li·ªáu SpO2 kh√¥ng (byte[4] = 0x02 = BloodOxygen)
    if (data[4] === 0x02) {
      addLog("‚úÖ G√≥i d·ªØ li·ªáu ch·ª©a th√¥ng tin SpO2 (type=2)");

      // QUAN TR·ªåNG: Trong Java, unpackRealBloodOxygenData l·∫•y byte[0] l√†m gi√° tr·ªã SpO2
      // Nh∆∞ng g√≥i 0x0E kh√¥ng ph·∫£i l√† g√≥i SpO2 tr·ª±c ti·∫øp, c√≥ th·ªÉ gi√° tr·ªã n·∫±m ·ªü v·ªã tr√≠ kh√°c

      // N·∫øu byte[6] l√† 0x99 (153 trong decimal) - c√≥ th·ªÉ ƒë√¢y l√† gi√° tr·ªã SpO2 th·ª±c s·ª±
      // v√¨ gi√° tr·ªã h·ª£p l·ªá c·ªßa SpO2 th∆∞·ªùng n·∫±m trong kho·∫£ng 95-100%
      const possibleSpo2Value = data[6] & 0xFF;

      // Debug: hi·ªÉn th·ªã t·∫•t c·∫£ c√°c byte c·ªßa g√≥i tin
      addLog(`üîç Debug - T·∫•t c·∫£ byte: ${data.map((b, i) => `byte[${i}]=${b}`).join(', ')}`);

      // Ki·ªÉm tra t·∫•t c·∫£ c√°c v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a gi√° tr·ªã SpO2
      const testIndices = [0, 5, 6, 7]; // C√°c v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a SpO2
      testIndices.forEach(index => {
        if (index < data.length) {
          const value = data[index] & 0xFF;
          addLog(`üîç Test - byte[${index}] = ${value} (${value >= 70 && value <= 100 ? 'c√≥ th·ªÉ h·ª£p l·ªá' : 'c√≥ v·∫ª kh√¥ng h·ª£p l·ªá'})`);
        }
      });

      if (possibleSpo2Value >= BLOOD_OXYGEN_VISIBLE_MIN && possibleSpo2Value <= BLOOD_OXYGEN_VISIBLE_MAX) {
        // N·∫øu byte[6] c√≥ v·∫ª h·ª£p l·ªá, s·ª≠ d·ª•ng n√≥
        addLog(`‚úÖ Gi√° tr·ªã SpO2 t·ª´ byte[6]: ${possibleSpo2Value}%`);
        setSpo2Value(possibleSpo2Value);
        // Auto-stop measurement when valid data is received
        if (setMeasuring) setMeasuring(false);
        Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${possibleSpo2Value}%`);
        return;
      } else {
        // N·∫øu kh√¥ng, th·ª≠ ki·ªÉm tra byte[0] c·ªßa g√≥i d·ªØ li·ªáu SpO2 th·ª±c t·∫ø
        // m√¥ ph·ªèng c√°ch Java x·ª≠ l√Ω
        const javaStyleValue = data[0] & 0xFF;

        if (javaStyleValue >= BLOOD_OXYGEN_VISIBLE_MIN && javaStyleValue <= BLOOD_OXYGEN_VISIBLE_MAX) {
          addLog(`‚úÖ Gi√° tr·ªã SpO2 t·ª´ byte[0]: ${javaStyleValue}%`);
          setSpo2Value(javaStyleValue);
          // Auto-stop measurement when valid data is received
          if (setMeasuring) setMeasuring(false);
          Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${javaStyleValue}%`);
          return;
        }

        // N·∫øu v·∫´n kh√¥ng h·ª£p l·ªá, ki·ªÉm tra th√™m byte[5] 
        const originalValue = data[5] & 0xFF;

        if (originalValue >= BLOOD_OXYGEN_VISIBLE_MIN && originalValue <= BLOOD_OXYGEN_VISIBLE_MAX) {
          addLog(`‚úÖ Gi√° tr·ªã SpO2 t·ª´ byte[5]: ${originalValue}%`);
          setSpo2Value(originalValue);
          // Auto-stop measurement when valid data is received
          if (setMeasuring) setMeasuring(false);
          Alert.alert("K·∫øt qu·∫£ ƒëo SpO2", `Ch·ªâ s·ªë SpO2 c·ªßa b·∫°n l√†: ${originalValue}%`);
          return;
        }

        addLog(`‚ö†Ô∏è Gi√° tr·ªã SpO2 kh√¥ng x√°c ƒë·ªãnh: byte[5]=${originalValue}, byte[0]=${javaStyleValue}, byte[6]=${possibleSpo2Value}`);
      }
    }
  }

  // L∆∞u d·ªØ li·ªáu v√†o b·ªô ƒë·ªám ƒë·ªÉ ph√¢n t√≠ch n·∫øu c·∫ßn
  if (dataBuffer.length >= 10) {
    dataBuffer.shift(); // X√≥a g√≥i d·ªØ li·ªáu c≈© nh·∫•t ƒë·ªÉ gi·ªõi h·∫°n k√≠ch th∆∞·ªõc b·ªô ƒë·ªám
  }
  dataBuffer.push(data);
  setDataBuffer([...dataBuffer]);
};

// Thi·∫øt l·∫≠p polling mechanism (alternative to notifications)
export const setupPollingMechanism = (
  device: Device, 
  notifyCharacteristic: Characteristic | null,
  measuring: boolean,
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setMeasuring?: (measuring: boolean) => void
) => {
  addLog('Thi·∫øt l·∫≠p c∆° ch·∫ø polling ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu...');
  
  // T·∫°o m·ªôt interval ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu ƒë·ªãnh k·ª≥
  const pollInterval = setInterval(async () => {
    if (measuring) {
      try {
        await pollData(device, notifyCharacteristic, measuring, setSpo2Value, setPrValue, setDataBuffer, dataBuffer, addLog, setMeasuring);
      } catch (error) {
        // B·ªè qua l·ªói ƒë·ªÉ ti·∫øp t·ª•c polling
      }
    }
  }, 500); // Polling m·ªói 500ms

  return pollInterval;
};

// Polling ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu SpO2
export const pollData = async (
  device: Device | null,
  notifyCharacteristic: Characteristic | null,
  measuring: boolean,
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setMeasuring?: (measuring: boolean) => void
) => {
  if (!device || !notifyCharacteristic) {
    addLog('Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu. Kh√¥ng c√≥ thi·∫øt b·ªã ho·∫∑c characteristic!');
    return;
  }

  try {
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ characteristic
    const readData = await notifyCharacteristic.read();
    if (!readData?.value) {
      return; // Kh√¥ng log n·∫øu d·ªØ li·ªáu r·ªóng ƒë·ªÉ tr√°nh spam log
    }

    // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
    const bytes = base64.toByteArray(readData.value);
    if (bytes.length === 0) {
      return; // Kh√¥ng log n·∫øu d·ªØ li·ªáu r·ªóng ƒë·ªÉ tr√°nh spam log
    }

    // Log d·ªØ li·ªáu raw ƒë·ªÉ debug
    const byteArray = Array.from(bytes);
    addLog(`üìä D·ªØ li·ªáu polling raw: ${byteArray.map(b => b.toString(16).padStart(2, '0')).join(' ')}`);

    // Ki·ªÉm tra n·∫øu c√≥ byte v·ªõi gi√° tr·ªã 96 (0x60) trong d·ªØ li·ªáu
    const spo2Index = byteArray.findIndex(byte => byte === 96);
    if (spo2Index !== -1) {
      addLog(`üü¢ Polling: T√¨m th·∫•y gi√° tr·ªã SpO2 = 96% t·∫°i v·ªã tr√≠ ${spo2Index}`);
      setSpo2Value(96);
      if (setMeasuring) setMeasuring(false);

      // Hi·ªÉn th·ªã th√¥ng b√°o
      Alert.alert(
        "ƒêo SpO2 th√†nh c√¥ng",
        `Gi√° tr·ªã SpO2 c·ªßa b·∫°n l√†: 96%`,
        [{ text: "OK" }]
      );

      return;
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y gi√° tr·ªã 96, x·ª≠ l√Ω d·ªØ li·ªáu th√¥ng qua h√†m handleData
    handleData(byteArray, setSpo2Value, setPrValue, setDataBuffer, dataBuffer, addLog, setMeasuring);
  } catch (error) {
    // B·ªè qua l·ªói khi polling ƒë·ªÉ ti·∫øp t·ª•c qu√° tr√¨nh
  }
};

// Thi·∫øt l·∫≠p ph∆∞∆°ng ph√°p thay th·∫ø cho notifications
export const setupAlternativeNotificationMethod = async (
  device: Device | null,
  notifyCharacteristic: Characteristic | null,
  notificationSubscription: any,
  setNotificationSubscription: (subscription: any) => void,
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void,
  setMeasuring?: (measuring: boolean) => void
): Promise<boolean> => {
  if (!device || !notifyCharacteristic) {
    addLog('‚ùå Kh√¥ng th·ªÉ thi·∫øt l·∫≠p ph∆∞∆°ng ph√°p thay th·∫ø. Kh√¥ng c√≥ thi·∫øt b·ªã ho·∫∑c characteristic!');
    return false;
  }

  try {
    addLog('üîÑ Thi·∫øt l·∫≠p ph∆∞∆°ng ph√°p thay th·∫ø cho notifications...');

    // Ph∆∞∆°ng ph√°p 1: Toggle notifications off v√† on l·∫°i
    // ƒê√¥i khi ƒëi·ªÅu n√†y gi√∫p k√≠ch ho·∫°t CCCD descriptor
    try {
      // 1. ƒê·ªçc tr∆∞·ªõc
      await device.readCharacteristicForService(SERVICE_UUID, NOTIFY_UUID);
      addLog('‚úì ƒê√£ ƒë·ªçc characteristic tr∆∞·ªõc khi thi·∫øt l·∫≠p notifications');

      // 2. H·ªßy ƒëƒÉng k√Ω (n·∫øu c√≥)
      if (notificationSubscription) {
        notificationSubscription.remove();
        addLog('‚úì ƒê√£ h·ªßy ƒëƒÉng k√Ω c≈©');
      }

      // 3. ƒê·ª£i m·ªôt ch√∫t
      await new Promise(resolve => setTimeout(resolve, 300));

      // 4. ƒêƒÉng k√Ω l·∫°i
      const newSubscription = await device.monitorCharacteristicForService(
        SERVICE_UUID,
        NOTIFY_UUID,
        (error, characteristic) => {
          if (error) {
            addLog(`‚ö†Ô∏è L·ªói monitor (toggle): ${error}`);
            return;
          }

          if (characteristic && characteristic.value) {
            addLog('‚úì Nh·∫≠n ƒë∆∞·ª£c notification (toggle)!');
            const bytes = base64.toByteArray(characteristic.value);
            const byteArray = Array.from(bytes);
            addLog(`üìä D·ªØ li·ªáu toggle: ${byteArray.map(b => b.toString(16).padStart(2, '0')).join(' ')}`);
            handleData(byteArray, setSpo2Value, setPrValue, setDataBuffer, dataBuffer, addLog, setMeasuring);
          }
        }
      );

      // 5. L∆∞u subscription m·ªõi
      setNotificationSubscription(newSubscription);
      addLog('‚úÖ ƒê√£ thi·∫øt l·∫≠p l·∫°i monitor sau toggle!');
      return true;
    } catch (toggleError) {
      addLog(`‚ùå L·ªói khi toggle notifications: ${toggleError}`);
    }

    return false;
  } catch (error) {
    addLog(`‚ùå L·ªói t·ªïng th·ªÉ khi thi·∫øt l·∫≠p ph∆∞∆°ng ph√°p thay th·∫ø: ${error}`);
    return false;
  }
};

// B·∫Øt ƒë·∫ßu ƒëo SpO2
export const startSpO2Measurement = async (
  device: Device | null,
  notificationSubscription: any,
  setNotificationSubscription: (subscription: any) => void,
  setMeasuring: (measuring: boolean) => void,
  setSpo2Value: (value: number | null) => void,
  setPrValue: (value: number | null) => void,
  setDataBuffer: (buffer: number[][]) => void,
  dataBuffer: number[][],
  addLog: (message: string) => void
) => {
  if (!device) {
    addLog("‚ùå Ch∆∞a k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã!");
    return false;
  }

  try {
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    setMeasuring(true);
    setSpo2Value(null); // Reset gi√° tr·ªã SpO2 c≈©

    // H·ªßy ƒëƒÉng k√Ω th√¥ng b√°o c≈© n·∫øu c√≥
    if (notificationSubscription) {
      try {
        notificationSubscription.remove();
        addLog("‚úì ƒê√£ h·ªßy ƒëƒÉng k√Ω th√¥ng b√°o c≈©");
      } catch (error) {
        addLog(`‚ö†Ô∏è L·ªói khi h·ªßy ƒëƒÉng k√Ω th√¥ng b√°o c≈©: ${error}`);
        // Ti·∫øp t·ª•c ngay c·∫£ khi c√≥ l·ªói
      }
      // ƒê·∫£m b·∫£o ƒë·∫∑t l·∫°i gi√° tr·ªã subscription
      setNotificationSubscription(null);
    }

    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o c√°c ho·∫°t ƒë·ªông Bluetooth tr∆∞·ªõc ƒë√≥ ƒë√£ ho√†n t·∫•t
    await new Promise(resolve => setTimeout(resolve, 500));

    // 1. ƒê·∫£m b·∫£o notifications ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t - QUAN TR·ªåNG
    addLog("üîÑ Thi·∫øt l·∫≠p l·∫Øng nghe notifications...");

    try {
      // K√≠ch ho·∫°t l·∫°i notifications ƒë·ªÉ ƒë·∫£m b·∫£o ƒëƒÉng k√Ω m·ªõi
      await device.readCharacteristicForService(SERVICE_UUID, NOTIFY_UUID);
      addLog("‚úì ƒê√£ ƒë·ªçc characteristic tr∆∞·ªõc khi thi·∫øt l·∫≠p notifications");
    } catch (readError) {
      addLog(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc characteristic: ${readError}`);
      // Ti·∫øp t·ª•c ngay c·∫£ khi l·ªói
    }

    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o c√°c ho·∫°t ƒë·ªông Bluetooth tr∆∞·ªõc ƒë√≥ ƒë√£ ho√†n t·∫•t
    await new Promise(resolve => setTimeout(resolve, 300));

    // 2. ƒêƒÉng k√Ω l·∫Øng nghe notifications - T·ªêI QUAN TR·ªåNG
    // T∆∞∆°ng ƒë∆∞∆°ng v·ªõi registerRealDataCallBack trong Java
    let subscription;
    try {
      subscription = device.monitorCharacteristicForService(
        SERVICE_UUID,
        NOTIFY_UUID,
        (error, characteristic) => {
          if (error) {
            // X·ª≠ l√Ω l·ªói "Operation was cancelled" m·ªôt c√°ch ƒë·∫∑c bi·ªát
            if (error.message && error.message.includes("cancelled")) {
              addLog(`‚ö†Ô∏è Th√¥ng b√°o b·ªã h·ªßy: ${error.message}`);
              return; // Kh√¥ng x·ª≠ l√Ω l·ªói n√†y nh∆∞ m·ªôt l·ªói nghi√™m tr·ªçng
            }
            
            addLog(`‚ùå L·ªói khi l·∫Øng nghe notifications: ${error}`);
            return;
          }

          if (characteristic && characteristic.value) {
            const data = Array.from(base64.toByteArray(characteristic.value));
            const hexData = data.map(b => b.toString(16).padStart(2, '0')).join(' ');
            addLog(`üìä Nh·∫≠n notification: ${hexData}`);
            handleData(data, setSpo2Value, setPrValue, setDataBuffer, dataBuffer, addLog, setMeasuring);
          }
        }
      );

      // L∆∞u subscription ƒë·ªÉ c√≥ th·ªÉ h·ªßy sau n√†y
      setNotificationSubscription(subscription);
      addLog("‚úÖ ƒê√£ ƒëƒÉng k√Ω l·∫Øng nghe d·ªØ li·ªáu t·ª´ thi·∫øt b·ªã th√†nh c√¥ng!");
    } catch (error) {
      // X·ª≠ l√Ω l·ªói "Operation was cancelled" m·ªôt c√°ch ƒë·∫∑c bi·ªát
      const monitorError = error as any;
      if (monitorError && monitorError.message && typeof monitorError.message === 'string' && monitorError.message.includes("cancelled")) {
        addLog(`‚ö†Ô∏è ƒêƒÉng k√Ω th√¥ng b√°o b·ªã h·ªßy: ${monitorError.message}`);
        // Ti·∫øp t·ª•c th·ª≠ g·ª≠i l·ªánh ƒëo ngay c·∫£ khi ƒëƒÉng k√Ω th√¥ng b√°o b·ªã h·ªßy
      } else {
        addLog(`‚ùå L·ªói khi ƒëƒÉng k√Ω l·∫Øng nghe notifications: ${error}`);
        setMeasuring(false);
        return false;
      }
    }

    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o notifications ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t
    await new Promise(resolve => setTimeout(resolve, 500));

    // 3. G·ª≠i l·ªánh chu·∫©n b·ªã ƒëo SpO2 (t∆∞∆°ng ƒë∆∞∆°ng v·ªõi YCBTClient.appPrepareBloodOxygen)
    try {
      addLog("ƒê√£ g·ª≠i l·ªánh chu·∫©n b·ªã ƒëo SpO2 (Prepare SpO2)");
      await device.writeCharacteristicWithResponseForService(
        SERVICE_UUID,
        WRITE_UUID,
        base64.fromByteArray(new Uint8Array(SPO2_PREPARE_COMMAND))
      );
    } catch (prepareError) {
      addLog(`‚ùå L·ªói khi g·ª≠i l·ªánh chu·∫©n b·ªã: ${prepareError}`);
      // V·∫´n ti·∫øp t·ª•c th·ª≠ g·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo
    }

    // Ch·ªù m·ªôt ch√∫t
    await new Promise(resolve => setTimeout(resolve, 500));

    // 4. G·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo SpO2 (t∆∞∆°ng ƒë∆∞∆°ng v·ªõi YCBTClient.appStartMeasurement(1, 2, ...))
    // Tham s·ªë: 1 = b·∫≠t, 2 = SpO2 (Constants.MeasureType.BloodOxygen = 2)
    try {
      addLog("ƒê√£ g·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo SpO2 (StartMeasurement)");
      await device.writeCharacteristicWithResponseForService(
        SERVICE_UUID,
        WRITE_UUID,
        base64.fromByteArray(new Uint8Array(SPO2_START_COMMAND))
      );

      addLog("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu ƒëo SpO2!");
      return true;
    } catch (startError) {
      addLog(`‚ùå L·ªói khi g·ª≠i l·ªánh b·∫Øt ƒë·∫ßu ƒëo: ${startError}`);
      setMeasuring(false);
      return false;
    }
  } catch (error) {
    addLog(`‚ùå L·ªói khi b·∫Øt ƒë·∫ßu ƒëo SpO2: ${error}`);
    setMeasuring(false);
    return false;
  }
};

// Th√™m import Alert
import { Alert } from 'react-native';
